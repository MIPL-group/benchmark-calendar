{"version":3,"sources":["data/calendar-data.js","calendar.js","App.js","serviceWorker.js","index.js"],"names":["appointments","title","startDate","Date","endDate","allDay","id","location","AppointmentFormContainerBasic","props","state","appointmentChanges","getAppointmentData","appointmentData","getAppointmentChanges","changeAppointment","bind","commitAppointment","field","changes","nextChanges","this","setState","type","commitChanges","appointment","classes","visible","visibleChange","cancelAppointment","target","onHide","displayAppointmentData","isNewAppointment","undefined","applyChanges","textEditorProps","variant","onChange","change","value","label","toUpperCase","slice","className","textField","pickerEditorProps","picker","ampm","date","toDate","inputVariant","format","onError","Overlay","fullSize","header","IconButton","closeButton","onClick","color","content","wrapper","icon","TextField","utils","MomentUtils","multiline","rows","buttonGroup","Button","button","React","AppointmentFormContainer","withStyles","theme","container","width","spacing","padding","paddingBottom","paddingTop","overflow","float","display","justifyContent","marginLeft","marginRight","margin","name","Calendar","data","currentDate","confirmationVisible","editingFormVisible","deletedAppointmentId","editingAppointment","previousAppointment","addedAppointment","startDayHour","endDayHour","toggleConfirmationVisible","commitDeletedAppointment","toggleEditingFormVisibility","onEditingAppointmentChange","onAddedAppointmentChange","appointmentForm","connectProps","filter","update","added","changed","deleted","startingAddedId","length","map","setDeletedAppointmentId","Paper","height","onCommitChanges","showOpenButton","showCloseButton","showDeleteButton","overlayComponent","onVisibilityChange","Dialog","open","onClose","cancelDelete","DialogTitle","DialogContent","DialogContentText","DialogActions","Fab","addButton","setHours","position","bottom","right","App","Navbar","bg","expand","fixed","Brand","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40723d0e.chunk.js","sourcesContent":["export const appointments = [\n    {\n        title: 'Customer Workshop',\n        startDate: new Date(2020, 7, 13),\n        endDate: new Date(2020, 7, 13),\n        allDay: true,\n        id: 39,\n        location: 'Room 1',\n    },\n];\n","/* eslint-disable max-classes-per-file */\n/* eslint-disable react/no-unused-state */\nimport * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { ViewState, EditingState } from '@devexpress/dx-react-scheduler';\nimport {\n    Scheduler,\n    Toolbar,\n    MonthView,\n    WeekView,\n    ViewSwitcher,\n    Appointments,\n    AppointmentTooltip,\n    AppointmentForm,\n    DragDropProvider,\n    EditRecurrenceMenu,\n    AllDayPanel,\n    DateNavigator,\n    TodayButton,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport { connectProps } from '@devexpress/dx-react-core';\nimport { KeyboardDateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport TextField from '@material-ui/core/TextField';\nimport LocationOn from '@material-ui/icons/LocationOn';\nimport Notes from '@material-ui/icons/Notes';\nimport Close from '@material-ui/icons/Close';\nimport CalendarToday from '@material-ui/icons/CalendarToday';\nimport Create from '@material-ui/icons/Create';\n\nimport { appointments } from './data/calendar-data';\n\nconst containerStyles = theme => ({\n    container: {\n        width: theme.spacing(68),\n        padding: 0,\n        paddingBottom: theme.spacing(2),\n    },\n    content: {\n        padding: theme.spacing(2),\n        paddingTop: 0,\n    },\n    header: {\n        overflow: 'hidden',\n        paddingTop: theme.spacing(0.5),\n    },\n    closeButton: {\n        float: 'right',\n    },\n    buttonGroup: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n    },\n    picker: {\n        marginRight: theme.spacing(2),\n        '&:last-child': {\n            marginRight: 0,\n        },\n        width: '50%',\n    },\n    wrapper: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: theme.spacing(1, 0),\n    },\n    icon: {\n        margin: theme.spacing(2, 0),\n        marginRight: theme.spacing(2),\n    },\n    textField: {\n        width: '100%',\n    },\n});\n\nclass AppointmentFormContainerBasic extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            appointmentChanges: {},\n        };\n\n        this.getAppointmentData = () => {\n            const { appointmentData } = this.props;\n            return appointmentData;\n        };\n        this.getAppointmentChanges = () => {\n            const { appointmentChanges } = this.state;\n            return appointmentChanges;\n        };\n\n        this.changeAppointment = this.changeAppointment.bind(this);\n        this.commitAppointment = this.commitAppointment.bind(this);\n    }\n\n    changeAppointment({ field, changes }) {\n        const nextChanges = {\n            ...this.getAppointmentChanges(),\n            [field]: changes,\n        };\n        this.setState({\n            appointmentChanges: nextChanges,\n        });\n    }\n\n    commitAppointment(type) {\n        const { commitChanges } = this.props;\n        const appointment = {\n            ...this.getAppointmentData(),\n            ...this.getAppointmentChanges(),\n        };\n        if (type === 'deleted') {\n            commitChanges({ [type]: appointment.id });\n        } else if (type === 'changed') {\n            commitChanges({ [type]: { [appointment.id]: appointment } });\n        } else {\n            commitChanges({ [type]: appointment });\n        }\n        this.setState({\n            appointmentChanges: {},\n        });\n    }\n\n    render() {\n        const {\n            classes,\n            visible,\n            visibleChange,\n            appointmentData,\n            cancelAppointment,\n            target,\n            onHide,\n        } = this.props;\n        const { appointmentChanges } = this.state;\n\n        const displayAppointmentData = {\n            ...appointmentData,\n            ...appointmentChanges,\n        };\n\n        const isNewAppointment = appointmentData.id === undefined;\n        const applyChanges = isNewAppointment\n            ? () => this.commitAppointment('added')\n            : () => this.commitAppointment('changed');\n\n        const textEditorProps = field => ({\n            variant: 'outlined',\n            onChange: ({ target: change }) => this.changeAppointment({\n                field: [field], changes: change.value,\n            }),\n            value: displayAppointmentData[field] || '',\n            label: field[0].toUpperCase() + field.slice(1),\n            className: classes.textField,\n        });\n\n        const pickerEditorProps = field => ({\n            className: classes.picker,\n            // keyboard: true,\n            ampm: false,\n            value: displayAppointmentData[field],\n            onChange: date => this.changeAppointment({\n                field: [field], changes: date ? date.toDate() : new Date(displayAppointmentData[field]),\n            }),\n            inputVariant: 'outlined',\n            format: 'DD/MM/YYYY HH:mm',\n            onError: () => null,\n        });\n\n        const cancelChanges = () => {\n            this.setState({\n                appointmentChanges: {},\n            });\n            visibleChange();\n            cancelAppointment();\n        };\n\n        return (\n            <AppointmentForm.Overlay\n                visible={visible}\n                target={target}\n                fullSize\n                onHide={onHide}\n            >\n                <div>\n                    <div className={classes.header}>\n                        <IconButton\n                            className={classes.closeButton}\n                            onClick={cancelChanges}\n                        >\n                            <Close color=\"action\" />\n                        </IconButton>\n                    </div>\n                    <div className={classes.content}>\n                        <div className={classes.wrapper}>\n                            <Create className={classes.icon} color=\"action\" />\n                            <TextField\n                                {...textEditorProps('title')}\n                            />\n                        </div>\n                        <div className={classes.wrapper}>\n                            <CalendarToday className={classes.icon} color=\"action\" />\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\n                                <KeyboardDateTimePicker\n                                    label=\"Start Date\"\n                                    {...pickerEditorProps('startDate')}\n                                />\n                                <KeyboardDateTimePicker\n                                    label=\"End Date\"\n                                    {...pickerEditorProps('endDate')}\n                                />\n                            </MuiPickersUtilsProvider>\n                        </div>\n                        <div className={classes.wrapper}>\n                            <LocationOn className={classes.icon} color=\"action\" />\n                            <TextField\n                                {...textEditorProps('location')}\n                            />\n                        </div>\n                        <div className={classes.wrapper}>\n                            <Notes className={classes.icon} color=\"action\" />\n                            <TextField\n                                {...textEditorProps('notes')}\n                                multiline\n                                rows=\"6\"\n                            />\n                        </div>\n                    </div>\n                    <div className={classes.buttonGroup}>\n                        {!isNewAppointment && (\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                className={classes.button}\n                                onClick={() => {\n                                    visibleChange();\n                                    this.commitAppointment('deleted');\n                                }}\n                            >\n                                Delete\n                            </Button>\n                        )}\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            className={classes.button}\n                            onClick={() => {\n                                visibleChange();\n                                applyChanges();\n                            }}\n                        >\n                            {isNewAppointment ? 'Create' : 'Save'}\n                        </Button>\n                    </div>\n                </div>\n            </AppointmentForm.Overlay>\n        );\n    }\n}\n\nconst AppointmentFormContainer = withStyles(containerStyles, { name: 'AppointmentFormContainer' })(AppointmentFormContainerBasic);\n\nconst styles = theme => ({\n    addButton: {\n        position: 'absolute',\n        bottom: theme.spacing(1) * 3,\n        right: theme.spacing(1) * 4,\n    },\n});\n\nclass Calendar extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: appointments,\n            currentDate: '2020-07-13',\n            confirmationVisible: false,\n            editingFormVisible: false,\n            deletedAppointmentId: undefined,\n            editingAppointment: undefined,\n            previousAppointment: undefined,\n            addedAppointment: {},\n            startDayHour: 9,\n            endDayHour: 19,\n            isNewAppointment: false,\n        };\n\n        this.toggleConfirmationVisible = this.toggleConfirmationVisible.bind(this);\n        this.commitDeletedAppointment = this.commitDeletedAppointment.bind(this);\n        this.toggleEditingFormVisibility = this.toggleEditingFormVisibility.bind(this);\n\n        this.commitChanges = this.commitChanges.bind(this);\n        this.onEditingAppointmentChange = this.onEditingAppointmentChange.bind(this);\n        this.onAddedAppointmentChange = this.onAddedAppointmentChange.bind(this);\n        this.appointmentForm = connectProps(AppointmentFormContainer, () => {\n            const {\n                editingFormVisible,\n                editingAppointment,\n                data,\n                addedAppointment,\n                isNewAppointment,\n                previousAppointment,\n            } = this.state;\n\n            const currentAppointment = data\n                    .filter(appointment => editingAppointment && appointment.id === editingAppointment.id)[0]\n                || addedAppointment;\n            const cancelAppointment = () => {\n                if (isNewAppointment) {\n                    this.setState({\n                        editingAppointment: previousAppointment,\n                        isNewAppointment: false,\n                    });\n                }\n            };\n\n            return {\n                visible: editingFormVisible,\n                appointmentData: currentAppointment,\n                commitChanges: this.commitChanges,\n                visibleChange: this.toggleEditingFormVisibility,\n                onEditingAppointmentChange: this.onEditingAppointmentChange,\n                cancelAppointment,\n            };\n        });\n    }\n\n    componentDidUpdate() {\n        this.appointmentForm.update();\n    }\n\n    onEditingAppointmentChange(editingAppointment) {\n        this.setState({ editingAppointment });\n    }\n\n    onAddedAppointmentChange(addedAppointment) {\n        this.setState({ addedAppointment });\n        const { editingAppointment } = this.state;\n        if (editingAppointment !== undefined) {\n            this.setState({\n                previousAppointment: editingAppointment,\n            });\n        }\n        this.setState({ editingAppointment: undefined, isNewAppointment: true });\n    }\n\n    setDeletedAppointmentId(id) {\n        this.setState({ deletedAppointmentId: id });\n    }\n\n    toggleEditingFormVisibility() {\n        const { editingFormVisible } = this.state;\n        this.setState({\n            editingFormVisible: !editingFormVisible,\n        });\n    }\n\n    toggleConfirmationVisible() {\n        const { confirmationVisible } = this.state;\n        this.setState({ confirmationVisible: !confirmationVisible });\n    }\n\n    commitDeletedAppointment() {\n        this.setState((state) => {\n            const { data, deletedAppointmentId } = state;\n            const nextData = data.filter(appointment => appointment.id !== deletedAppointmentId);\n\n            return { data: nextData, deletedAppointmentId: null };\n        });\n        this.toggleConfirmationVisible();\n    }\n\n    commitChanges({ added, changed, deleted }) {\n        this.setState((state) => {\n            let { data } = state;\n            if (added) {\n                const startingAddedId = data.length > 0 ? data[data.length - 1].id + 1 : 0;\n                data = [...data, { id: startingAddedId, ...added }];\n            }\n            if (changed) {\n                data = data.map(appointment => (\n                    changed[appointment.id] ? { ...appointment, ...changed[appointment.id] } : appointment));\n            }\n            if (deleted !== undefined) {\n                this.setDeletedAppointmentId(deleted);\n                this.toggleConfirmationVisible();\n            }\n            return { data, addedAppointment: {} };\n        });\n    }\n\n    render() {\n        const {\n            currentDate,\n            data,\n            confirmationVisible,\n            editingFormVisible,\n            startDayHour,\n            endDayHour,\n        } = this.state;\n        const { classes } = this.props;\n\n        return (\n            <Paper>\n                <Scheduler\n                    data={data}\n                    height={700}\n                >\n                    <ViewState\n                        currentDate={currentDate}\n                    />\n                    <EditingState\n                        onCommitChanges={this.commitChanges}\n                        onEditingAppointmentChange={this.onEditingAppointmentChange}\n                        onAddedAppointmentChange={this.onAddedAppointmentChange}\n                    />\n                    <WeekView\n                        startDayHour={startDayHour}\n                        endDayHour={endDayHour}\n                    />\n                    <MonthView />\n                    <AllDayPanel />\n                    <EditRecurrenceMenu />\n                    <Appointments />\n                    <AppointmentTooltip\n                        showOpenButton\n                        showCloseButton\n                        showDeleteButton\n                    />\n                    <Toolbar />\n                    <DateNavigator />\n                    <TodayButton />\n                    <ViewSwitcher />\n                    <AppointmentForm\n                        overlayComponent={this.appointmentForm}\n                        visible={editingFormVisible}\n                        onVisibilityChange={this.toggleEditingFormVisibility}\n                    />\n                    <DragDropProvider />\n                </Scheduler>\n\n                <Dialog\n                    open={confirmationVisible}\n                    onClose={this.cancelDelete}\n                >\n                    <DialogTitle>\n                        Delete Appointment\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Are you sure you want to delete this appointment?\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.toggleConfirmationVisible} color=\"primary\" variant=\"outlined\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.commitDeletedAppointment} color=\"secondary\" variant=\"outlined\">\n                            Delete\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Fab\n                    color=\"secondary\"\n                    className={classes.addButton}\n                    onClick={() => {\n                        this.setState({ editingFormVisible: true });\n                        this.onEditingAppointmentChange(undefined);\n                        this.onAddedAppointmentChange({\n                            startDate: new Date(currentDate).setHours(startDayHour),\n                            endDate: new Date(currentDate).setHours(startDayHour + 1),\n                        });\n                    }}\n                >\n                    <AddIcon />\n                </Fab>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles, { name: 'EditingCalendar' })(Calendar);\n","import React from 'react';\nimport './App.css';\nimport Calendar from \"./calendar\";\nimport Navbar from \"react-bootstrap/Navbar\";\nfunction App() {\n    return (\n        <div>\n            <Navbar bg=\"light\" expand=\"md\" fixed=\"top\" variant=\"light\">\n                <Navbar.Brand href=\"./index.html\">Home</Navbar.Brand>\n            </Navbar>\n            <div className=\"py-5 text-center\">\n                <h2 className=\"mt-2\">Calendar</h2>\n            </div>\n            <div>\n                <Calendar/>\n            </div>\n            <footer className=\"my-5 pt-5 text-muted text-center text-small\">\n                <p className=\"mb-1\">Editing Calendar Benchmark Demo Site</p>\n                <a href=\"https://mipl-group.github.io/\">MIPL github page</a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}